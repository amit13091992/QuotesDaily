package com.amit.quotesdaily.activity;import android.annotation.SuppressLint;import android.content.Intent;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.support.annotation.RequiresApi;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.text.Html;import android.transition.Fade;import android.transition.Slide;import android.view.Gravity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.LinearLayout;import android.widget.TextView;import com.amit.quotesdaily.R;import com.amit.quotesdaily.adapters.IntroPagerAdapter;import com.amit.quotesdaily.utils.PrefrenceManager;import com.getkeepsafe.taptargetview.TapTarget;import com.getkeepsafe.taptargetview.TapTargetView;/** * Created by Amit on 31-Mar-19. * * * CURRENTLY USING 3RD PARTY LIBRARY FOR INTRO SCREEN. */public class OLD_TestIntroActiivty extends AppCompatActivity {    private ViewPager viewPager;    private IntroPagerAdapter myViewPagerAdapter;    private LinearLayout dotsLayout;    private TextView[] dots;    private int[] layouts;    private Button btnSkip, btnNext;    /**     * ViewPager listener     */    ViewPager.OnPageChangeListener viewPagerPageChangeListener = new ViewPager.OnPageChangeListener() {        @Override        public void onPageSelected(int position) {            addBottomDots(position);            // changing the next button text 'NEXT' / 'GOT IT'            if (position == layouts.length - 1) {                // last page. make button text to GOT IT                btnNext.setText(getString(R.string.start));                btnSkip.setVisibility(View.GONE);            } else {                // still pages are left                btnNext.setText(getString(R.string.next));                btnSkip.setVisibility(View.VISIBLE);            }        }        @Override        public void onPageScrolled(int i, float v, int i1) {        }        @Override        public void onPageScrollStateChanged(int position) {        }    };    private PrefrenceManager prefrenceManager;    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    @SuppressLint("RtlHardcoded")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        /**         * Setting animation in the activity when it's starting.         */        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            Slide slide = new Slide();            slide.setSlideEdge(Gravity.RIGHT);            getWindow().setEnterTransition(slide);        }        /**         * Previous viewpager logic         *///        //Initialize the UI elements.        viewPager = (ViewPager) findViewById(R.id.view_pager);        dotsLayout = (LinearLayout) findViewById(R.id.layoutDots);        btnSkip = (Button) findViewById(R.id.btn_skip);        btnNext = (Button) findViewById(R.id.btn_next);        // layouts of all Intro sliders        layouts = new int[]{                R.layout.intro_slide1,                R.layout.intro_slide2,                R.layout.intro_slide3,                R.layout.intro_slide4};        // adding bottom dots        addBottomDots(0);        // making notification bar transparent        changeStatusBarColor();        myViewPagerAdapter = new IntroPagerAdapter(getApplicationContext(), layouts);        viewPager.setAdapter(myViewPagerAdapter);        viewPager.addOnPageChangeListener(viewPagerPageChangeListener);        btnSkip.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                launchHomeScreen();            }        });        btnNext.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                // checking for last page                // if last page home screen will be launched                int current = getItem(+1);                if (current < layouts.length) {                    // move to next screen                    viewPager.setCurrentItem(current);                } else {                    launchHomeScreen();                }            }        });    }    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    private void setupWindowAnimations() {        Fade fade = new Fade();        fade.setDuration(1000);        getWindow().setEnterTransition(fade);    }    private int getItem(int position) {        return viewPager.getCurrentItem() + position;    }    private void launchHomeScreen() {        //prefrenceManager.setFirstTimeLaunch(false);        startActivity(new Intent(OLD_TestIntroActiivty.this, MainActivity.class));        finish();    }    /**     * Making notification bar transparent     */    private void changeStatusBarColor() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            Window window = getWindow();            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);            window.setStatusBarColor(Color.TRANSPARENT);        }    }    /**     * Add bottom dots in the View.     */    private void addBottomDots(int currentPage) {        dots = new TextView[layouts.length];//        int[] colorsActive = getResources().getIntArray(R.array.array_dot_active);//        int[] colorsInactive = getResources().getIntArray(R.array.array_dot_inactive);////        dotsLayout.removeAllViews();//        for (int i = 0; i < dots.length; i++) {//            dots[i] = new TextView(this);//            dots[i].setText(Html.fromHtml("&#8226;"));//            dots[i].setTextSize(35);//            dots[i].setTextColor(colorsInactive[currentPage]);//            dotsLayout.addView(dots[i]);//        }////        if (dots.length > 0)//            dots[currentPage].setTextColor(colorsActive[currentPage]);    }    /**     * Showcase view library code     */    private void setupSkipButtonShowcaseView() {        TapTargetView.showFor(this,                 // `this` is an Activity                TapTarget.forView(findViewById(R.id.btn_skip), "Press Skip to start " +                        "reading", "We have the best " + "Quotes, believe me")                        // All options below are optional                        .outerCircleColor(R.color.colorGreenDark)      // Specify a color for the outer circle                        .outerCircleAlpha(0.98f)            // Specify the alpha amount for the                        // outer circle                        .targetCircleColor(R.color.colorWhite)   // Specify a color for the target circle                        .titleTextSize(23)                  // Specify the size (in sp) of the                        .titleTextColor(R.color.colorWhite)      // Specify the color of the title text                        .descriptionTextSize(16)            // Specify the size (in sp) of the                        // description text                        .descriptionTextColor(R.color.colorWhite)  // Specify the color of the description                        // text                        .textColor(R.color.colorWhite)            // Specify a color for both the title                        // and description text                        .dimColor(R.color.dot_light_screen3)            // If set, will dim behind the view with                        // 30% opacity of the given color                        .drawShadow(true)                   // Whether to draw a drop shadow or not                        .cancelable(false)                  // Whether tapping outside the outer circle dismisses the view                        .tintTarget(true)                   // Whether to tint the target view's color                        .transparentTarget(false)           // Specify whether the target is transparent (displays the content underneath)                        .targetRadius(90),                  // Specify the target radius (in dp)                new TapTargetView.Listener() {          // The listener can listen for regular clicks, long clicks or cancels                    @Override                    public void onTargetClick(TapTargetView view) {                        super.onTargetClick(view);      // This call is optional                        //doSomething();                        setupNextButtonShowcaseView();                    }                });    }    private void setupNextButtonShowcaseView() {        TapTargetView.showFor(this,                 // `this` is an Activity                TapTarget.forView(findViewById(R.id.btn_next), "Press Next to know more about us"                        , "Stay tuned to get exciting quotes")                        // All options below are optional                        .outerCircleColor(R.color.colorGreenDark)      // Specify a color for the outer circle                        .outerCircleAlpha(0.98f)            // Specify the alpha amount for the                        // outer circle                        .targetCircleColor(R.color.colorWhite)   // Specify a color for the target circle                        .titleTextSize(25)                  // Specify the size (in sp) of the                        .titleTextColor(R.color.colorWhite)      // Specify the color of the title text                        .descriptionTextSize(18)            // Specify the size (in sp) of the                        // description text                        .descriptionTextColor(R.color.colorWhite)  // Specify the color of the description                        // text                        .textColor(R.color.colorWhite)            // Specify a color for both the title                        // and description text                        .dimColor(R.color.dot_light_screen3)            // If set, will dim behind the view with                        // 30% opacity of the given color                        .drawShadow(true)                   // Whether to draw a drop shadow or not                        .cancelable(false)                  // Whether tapping outside the outer circle dismisses the view                        .tintTarget(true)                   // Whether to tint the target view's color                        .transparentTarget(false)           // Specify whether the target is transparent (displays the content underneath)                        .targetRadius(90)                   // Specify the target radius (in dp)        );    }}